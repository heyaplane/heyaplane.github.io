<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Org To Website</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="rethink.css" />
</head>
<body>
<div id="preamble" class="status">
<nav id=navbar>
        <ul>
         <li><a href="index.html">Home</a></li>
         <li><a href="index.html">About</a></li>
        </ul>
       </nav>
</div>
<div id="content" class="content">
<h1 class="title">Org To Website</h1>
<div class="intro" id="org7e62728">
<p>
Source: <a href="https://www.youtube.com/watch?v=AfkrzFodoNw">https://www.youtube.com/watch?v=AfkrzFodoNw</a>
</p>

</div>

<div id="outline-container-orge2cb4fd" class="outline-2">
<h2 id="orge2cb4fd">Folder structure</h2>
<div class="outline-text-2" id="text-orge2cb4fd">
</div>
<div id="outline-container-org49ddaac" class="outline-3">
<h3 id="org49ddaac">Site folder</h3>
<div class="outline-text-3" id="text-org49ddaac">
<p>
build_site.el
</p>
</div>
<div id="outline-container-org52618df" class="outline-4">
<h4 id="org52618df">Content</h4>
<div class="outline-text-4" id="text-org52618df">
<p>
index.org (landing page)
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orgd92f3fd" class="outline-2">
<h2 id="orgd92f3fd">Step 1: Create build script</h2>
<div class="outline-text-2" id="text-orgd92f3fd">
<p>
Create file build_site.el
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">require</span> '<span class="org-constant">ox-publish</span>)

(message <span class="org-string">"Build complete!"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-org68f3551" class="outline-2">
<h2 id="org68f3551">Step 2: Create shell script</h2>
<div class="outline-text-2" id="text-org68f3551">
<p>
Create file build.sh
</p>

<div class="org-src-container">
<pre class="src src-sh"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">sh</span>
emacs -Q --script build_site.el
</pre>
</div>

<p>
Run 'chmod +x build.sh' to make it executable.
</p>
</div>
</div>
<div id="outline-container-org3e70896" class="outline-2">
<h2 id="org3e70896">Step 3: Add publishing project config</h2>
<div class="outline-text-2" id="text-org3e70896">
<p>
Add to build_site.el file:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">setq</span> org-publish-project-alist
      (list
       (list <span class="org-string">"my_site"</span>
            <span class="org-builtin">:recursive</span> t
            <span class="org-builtin">:base-directory</span> <span class="org-string">"./content"</span>
            <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public"</span>
            <span class="org-builtin">:publishing-function</span> 'org-html-publish-to-html)))

(org-publish-all t)
</pre>
</div>

<p>
Top level lists all project configurations.
Second-level lists are for individual publishing formats (html, pdf, etc).
</p>

<p>
org-publish-all makes sure files are regenerated from scratch each time (no cached files).
</p>

<p>
Running build.sh at this point will generate a 'public' folder with the nely generated 'index.html' file representing our site.
</p>
</div>
</div>

<div id="outline-container-orgfc51a5b" class="outline-2">
<h2 id="orgfc51a5b">Step 4: Preview site (optional)</h2>
<div class="outline-text-2" id="text-orgfc51a5b">
<p>
Copy 'simple-httpd.el' file from github.
</p>

<p>
Install 'simple-httpd' package with:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(use-package simple-httpd
  <span class="org-builtin">:ensure</span> t)
</pre>
</div>

<p>
Run: 'M-x httpd-serve-directory', choose the 'public' folder, then navigate to 'localhost:8080' in browser.
</p>
</div>
</div>
<div id="outline-container-org4dc3438" class="outline-2">
<h2 id="org4dc3438">Step 5: Improve HTML output</h2>
<div class="outline-text-2" id="text-org4dc3438">
<p>
Add following to build_site.el:
</p>
<div class="org-src-container">
<pre class="src src-elisp"><span class="org-builtin">:with-author</span> nil
<span class="org-builtin">:with-creator</span> t
<span class="org-builtin">:with-toc</span> t
<span class="org-builtin">:section-numbers</span> nil
<span class="org-builtin">:time-stamp-file</span> nil

(<span class="org-keyword">setq</span> org-html-validation-link nil)
</pre>
</div>

<p>
Use 'M-h v org-publish-project-alist' to see a list of :with options.
</p>
</div>
</div>

<div id="outline-container-orga1c233e" class="outline-2">
<h2 id="orga1c233e">Step 6: Improve styling</h2>
<div class="outline-text-2" id="text-orga1c233e">
<p>
Add following to  build_site.el:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">setq</span> org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-head <span class="org-string">"&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"rethink.css\" /&gt;"</span>)
</pre>
</div>

<p>
Note that the 'rethink.css' file should be sitting in the 'public' folder with the other .html files.
</p>
</div>
</div>

<div id="outline-container-org2676c2b" class="outline-2">
<h2 id="org2676c2b">Step 7: Add html preamble</h2>
<div class="outline-text-2" id="text-org2676c2b">
<p>
Add following to build_site.el:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">setq</span> org-html-preamble
      <span class="org-string">"&lt;nav id=navbar&gt;</span>
<span class="org-string">        &lt;ul&gt;</span>
<span class="org-string">         &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;</span>
<span class="org-string">         &lt;li&gt;&lt;a href=\"index.html\"&gt;About&lt;/a&gt;&lt;/li&gt;</span>
<span class="org-string">        &lt;/ul&gt;</span>
<span class="org-string">       &lt;/nav&gt;"</span>
      )
</pre>
</div>
</div>
</div>

<div id="outline-container-org11452d2" class="outline-2">
<h2 id="org11452d2">Step 8: Link to other files</h2>
<div class="outline-text-2" id="text-org11452d2">
<p>
This was a difficult problem to solve, since I wanted to keep most of my org files in a separate folder. I ended up creating a separate "dummy" project that only includes the files I specify in a list:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(list <span class="org-string">"sb_files"</span>
     <span class="org-builtin">:base-directory</span> <span class="org-string">"../sb"</span>
     <span class="org-builtin">:base-extension</span> <span class="org-string">"none"</span>
     <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public"</span>
     <span class="org-builtin">:publishing-function</span> 'org-html-publish-to-html
     <span class="org-builtin">:with-author</span> nil
     <span class="org-builtin">:with-creator</span> t
     <span class="org-builtin">:with-toc</span> nil
     <span class="org-builtin">:section-numbers</span> nil
     <span class="org-builtin">:time-stamp-file</span> nil
     <span class="org-builtin">:include</span> '(
               <span class="org-string">"org_to_website.org"</span>
      ))
</pre>
</div>

<p>
Unfortunately, links between files need to made manually, since links will break after converting to html and moving files into the same directory.
</p>
</div>
</div>

<div id="outline-container-org19a9814" class="outline-2">
<h2 id="org19a9814">Step 9: Better code blocks support</h2>
<div class="outline-text-2" id="text-org19a9814">
<p>
Insert this at the top of build_site.el:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">require</span> '<span class="org-constant">package</span>)
(<span class="org-keyword">setq</span> package-user-dir (expand-file-name <span class="org-string">"./.packages"</span>))
(<span class="org-keyword">setq</span> package-archives '((<span class="org-string">"melpa"</span> . <span class="org-string">"https://melpa.org/packages/"</span>)
                         (<span class="org-string">"elpa"</span> . <span class="org-string">"https://elpa.gnu.org/packages/"</span>)))

(package-initialize)
(<span class="org-keyword">unless</span> package-archive-contents
  (package-refresh-contents))

(package-install 'htmlize)
(<span class="org-keyword">setq</span> org-html-htmlize-output-type 'css)
</pre>
</div>
</div>

<div id="outline-container-orgac84335" class="outline-3">
<h3 id="orgac84335"><span class="todo TODO">TODO</span> Fix bug where line breaks can disrupt syntax highlighting</h3>
</div>
</div>

<div id="outline-container-org7001077" class="outline-2">
<h2 id="org7001077">Final build script</h2>
<div class="outline-text-2" id="text-org7001077">
<div class="org-src-container">
<pre class="src src-elisp">(<span class="org-keyword">require</span> '<span class="org-constant">package</span>)
(<span class="org-keyword">setq</span> package-user-dir (expand-file-name <span class="org-string">"./.packages"</span>))
(<span class="org-keyword">setq</span> package-archives '((<span class="org-string">"melpa"</span> . <span class="org-string">"https://melpa.org/packages/"</span>)
                         (<span class="org-string">"elpa"</span> . <span class="org-string">"https://elpa.gnu.org/packages/"</span>)))

(package-initialize)
(<span class="org-keyword">unless</span> package-archive-contents
  (package-refresh-contents))

(package-install 'htmlize)
(<span class="org-keyword">setq</span> org-html-htmlize-output-type 'css)

(<span class="org-keyword">require</span> '<span class="org-constant">ox-publish</span>)

(<span class="org-keyword">setq</span> org-publish-project-alist
      (list
       (list <span class="org-string">"site"</span>
            <span class="org-builtin">:recursive</span> t
            <span class="org-builtin">:base-directory</span> <span class="org-string">"./content"</span>
            <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public"</span>
            <span class="org-builtin">:publishing-function</span> 'org-html-publish-to-html
            <span class="org-builtin">:with-author</span> nil
            <span class="org-builtin">:with-creator</span> t
            <span class="org-builtin">:with-toc</span> nil
            <span class="org-builtin">:section-numbers</span> nil
            <span class="org-builtin">:time-stamp-file</span> nil
            )
       (list <span class="org-string">"sb_files"</span>
            <span class="org-builtin">:base-directory</span> <span class="org-string">"../sb"</span>
            <span class="org-builtin">:base-extension</span> <span class="org-string">"none"</span>
            <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public"</span>
            <span class="org-builtin">:publishing-function</span> 'org-html-publish-to-html
            <span class="org-builtin">:with-author</span> nil
            <span class="org-builtin">:with-creator</span> t
            <span class="org-builtin">:with-toc</span> nil
            <span class="org-builtin">:section-numbers</span> nil
            <span class="org-builtin">:time-stamp-file</span> nil
            <span class="org-builtin">:include</span> '(
                      <span class="org-string">"org_to_website.org"</span>
             ))
       (list <span class="org-string">"site_all"</span>
            <span class="org-builtin">:components</span> '(<span class="org-string">"site"</span> <span class="org-string">"sb_files"</span>)
             )))

(<span class="org-keyword">setq</span> org-html-validation-link nil)
(<span class="org-keyword">setq</span> org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-head <span class="org-string">"&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"rethink.css\" /&gt;"</span>
      )
(<span class="org-keyword">setq</span> org-html-preamble
      <span class="org-string">"&lt;nav id=navbar&gt;</span>
<span class="org-string">        &lt;ul&gt;</span>
<span class="org-string">         &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;</span>
<span class="org-string">         &lt;li&gt;&lt;a href=\"index.html\"&gt;About&lt;/a&gt;&lt;/li&gt;</span>
<span class="org-string">        &lt;/ul&gt;</span>
<span class="org-string">       &lt;/nav&gt;"</span>
      )

(org-publish-all t)

(message <span class="org-string">"Build complete!"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb7fcc73" class="outline-2">
<h2 id="orgb7fcc73">Tips</h2>
<div class="outline-text-2" id="text-orgb7fcc73">
<p>
You can prevent org publish from automatically converting underscores to subscript html elements by inserting the following into any publishable org file:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+OPTIONS: ^:{}</span>
</pre>
</div>

<p>
You can create custom classes in your org files that can be referenced by css:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-block-begin-line">#+BEGIN_intro</span>
This is example text.
<span class="org-org-block-end-line">#+END_intro</span>
</pre>
</div>

<p>
Reference this class in a css file:
</p>
<div class="org-src-container">
<pre class="src src-css"><span class="org-css-selector">.intro </span>{
<span class="org-css-property">margin</span>: 0;
}
</pre>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)</p>
</div>
</body>
</html>
